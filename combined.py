import pandas as pd
import os

def analyze_data(input_path, output_path):
    # Load the CSV file
    df = pd.read_csv(input_path)

    # Fill missing Organization with Principle, if available
    df['Organization'] = df['Organization'].fillna(df['Principle'])

    # If Organization and Principle are still missing, fill with Email
    df['Organization'] = df['Organization'].fillna(df['Email'])

    # Diagnostics: Count rows before filtering
    print(f"Total rows before filtering: {len(df)}")

    # Filter rows where either Billing or Expiring is 'checked'
    df_filtered = df[(df['Billing'] == 'checked') | (df['Expiring'] == 'checked')].copy()

    # Clean up the Organization column by stripping whitespace and converting to lowercase
    df_filtered['Organization'] = df_filtered['Organization'].str.strip().str.lower()

    # Diagnostics: Count rows after filtering
    print(f"Total rows after filtering: {len(df_filtered)}")

    # Count rows with valid expiration dates
    expiring_count = len(df_filtered[df_filtered['Expiration Date'].notna()])
    print(f"Total rows with valid expiration dates: {expiring_count}")

    # Group emails, expiration dates, and Stripe email by Organization
    grouped = df_filtered.groupby('Organization').agg({
        'Email': list,
        'Expiration Date': list,
        'Stripe Email': 'first'
    }).reset_index()

    # Prepare the output structure and diagnostics for final counts
    output_rows = []
    total_assignees = 0
    total_expiring = 0

    for _, row in grouped.iterrows():
        organization = row['Organization']
        emails = row['Email']
        expiring_dates = row['Expiration Date']
        stripe_email = row['Stripe Email']

        # Use the first email as Stripe Email if not available
        if pd.isna(stripe_email) or stripe_email == '':
            stripe_email = emails[0] if emails else ''
        
        if emails:  # Only process if there are emails after filtering
            # Append the organization name, email, expiring date, and stripe email on the first row
            output_rows.append([organization, emails[0], expiring_dates[0], stripe_email])
            total_assignees += 1
            if expiring_dates[0] != '':
                total_expiring += 1

            # Add remaining emails in new rows, keeping the organization and stripe email columns empty
            for email, expiring_date in zip(emails[1:], expiring_dates[1:]):
                output_rows.append(['', email, expiring_date, ''])
                total_assignees += 1
                if expiring_date != '':
                    total_expiring += 1
            
            # Add a blank row for separation
            output_rows.append(['', '', '', ''])

    # Create a DataFrame for the output
    formatted_df = pd.DataFrame(output_rows, columns=['Organization', 'Assignee', 'Expiration', 'Stripe Email'])

    # Save the reorganized data to a new CSV file
    formatted_df.to_csv(output_path, index=False)

    # Print diagnostics for total counts
    print(f"Total assignees counted: {total_assignees}")
    print(f"Total assignees with expiration dates: {total_expiring}")

def compare_stripe_emails(output_file_path, stripe_emails_path, output_corrected_path, unmatched_emails_path):
    # Load the output file generated by your main analysis
    output_df = pd.read_csv(output_file_path)
    
    # Load the actual Stripe emails CSV file
    stripe_emails_df = pd.read_csv(stripe_emails_path)
    
    # Extract the correct Stripe emails using the 'Email' column from the actual Stripe emails CSV
    # Ensure emails are lowercased and stripped of spaces
    actual_stripe_emails = set(stripe_emails_df['Email'].str.strip().str.lower().dropna().unique())

    # Initialize the 'Email Status' column
    output_df['Email Status'] = ''

    # Track incorrect emails for a separate report
    incorrect_emails = []

    # Track organizations to ensure only the first row of each organization is checked
    checked_organizations = set()

    # Iterate over the rows to check only the first row of each organization
    for index, row in output_df.iterrows():
        organization = row['Organization']
        stripe_email = row['Stripe Email'].strip().lower() if pd.notna(row['Stripe Email']) else ''

        # Only check the first row of each organization
        if organization not in checked_organizations and pd.notna(organization):
            # Mark the organization as checked
            checked_organizations.add(organization)

            # Check if the first row has a Stripe email
            if stripe_email == '':
                # Mark as "no stripe email provided" if the first row is missing a Stripe email
                output_df.at[index, 'Email Status'] = 'no stripe email provided'
            else:
                # Compare the Stripe email with the actual list
                if stripe_email not in actual_stripe_emails:
                    # Mark as incorrect and add to the list
                    output_df.at[index, 'Email Status'] = 'incorrect email'
                    incorrect_emails.append(stripe_email)

    # Save the modified output file with the 'Email Status' column
    output_df.to_csv(output_corrected_path, index=False)
    
    # Save the list of incorrect Stripe emails in a separate file
    if incorrect_emails:
        incorrect_emails_df = pd.DataFrame(incorrect_emails, columns=['Incorrect Stripe Email'])
        incorrect_emails_df.to_csv(unmatched_emails_path, index=False)

    # Print the count of incorrect emails
    print(f"Total incorrect Stripe emails: {len(incorrect_emails)}")

# Set paths for the files
downloads_folder = os.path.expanduser('~/Downloads')
input_file_name = 'Table 1-Grid view.csv'  # Input file for analysis
output_file_name = 'reorganized_customers_check5.csv'  # Output file from the analysis function
stripe_emails_file_name = 'unified_customers.csv'  # File with actual Stripe emails
output_corrected_file_name = 'output_corrected10-29.csv'  # File to save the corrected output
unmatched_emails_file_name = 'unmatched_stripe_emails.csv'  # File to save unmatched Stripe emails

# Define file paths
input_file_path = os.path.join(downloads_folder, input_file_name)
output_file_path = os.path.join(downloads_folder, output_file_name)
stripe_emails_path = os.path.join(downloads_folder, stripe_emails_file_name)
output_corrected_path = os.path.join(downloads_folder, output_corrected_file_name)
unmatched_emails_path = os.path.join(downloads_folder, unmatched_emails_file_name)

# Run the analysis function
analyze_data(input_file_path, output_file_path)

# Run the comparison function
compare_stripe_emails(output_file_path, stripe_emails_path, output_corrected_path, unmatched_emails_path)
